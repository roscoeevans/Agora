---
description: When needing to know where to place a new file, organize code into the correct package, understand the Packages/ directory structure, or determine which module (Feature/Kit/Shared/ThirdParty) should contain new functionality.
alwaysApply: false
---
## Agora iOS Project Structure

### Overview

This rule defines where files and code belong in the Agora iOS app's Swift Package Manager (SPM) modular architecture. Use this when creating new files, features, or modules to ensure correct placement.

### Root Directory Structure

```
Agora/
├── Agora.xcodeproj/           # Main Xcode project
├── AgoraTests/                # Main app unit tests
├── AgoraUITests/              # Main app UI tests
├── database/                  # Supabase migrations and schema
├── docs/                      # Project documentation
├── OpenAPI/                   # API specifications (see ios-configuration.mdc)
├── Packages/                  # Swift Package modules (see below)
├── Resources/                 # App resources and main app files
├── Scripts/                   # Build and utility scripts
├── supabase/                  # Supabase Edge Functions
├── Tests/                     # Cross-module snapshot/UI tests
├── Makefile                   # Build commands
└── Package.swift              # Root package manifest
```

### Packages Directory Structure

The `Packages/` directory is organized into **four main categories**:

#### Features (`Packages/Features/`)
**When to use:** Creating user-facing features that represent distinct app functionality

```
Features/
├── Auth/                      # Auth UI/UX + app-level state (services are in AppFoundation)
├── Compose/                   # Post composition and media upload
├── DMs/                       # Direct messaging
├── Home/                      # Home feature coordinator
├── HomeFollowing/             # Following feed (chronological)
├── HomeForYou/                # For You feed (recommendations)
├── Notifications/             # Push notifications and in-app alerts
├── PostDetail/                # Individual post viewing
├── Profile/                   # User profiles and settings
├── Search/                    # People and content search
└── Threading/                 # Reply threads and conversations
```

**Feature modules contain:**
- SwiftUI views and view models
- Feature-specific business logic
- Feature-level coordinators and state management
- Dependencies on Kits and Shared modules

#### Kits (`Packages/Kits/`)
**When to use:** Creating reusable functionality that provides specific capabilities

```
Kits/
├── Analytics/                 # PostHog analytics wrapper
├── DesignSystem/              # UI components, colors, typography
├── Media/                     # Image/video capture, processing, upload
├── Moderation/                # Content moderation and reporting
├── Networking/                # API client and network layer
├── Persistence/               # SwiftData models and caching
├── Recommender/               # Recommendation engine client
├── SupabaseKit/               # Supabase client integration
└── Verification/              # Device attestation and anti-bot
```

**Kit modules contain:**
- Service protocols and implementations
- Reusable business logic
- Third-party SDK wrappers
- Dependencies on other Kits and Shared modules

**Important:** Authentication services (Sign in with Apple, phone verification, session management) live in `AppFoundation`, not as a Kit. See "Why Auth is in AppFoundation" below.

#### Shared (`Packages/Shared/`)
**When to use:** Creating cross-cutting concerns and utilities used everywhere

```
Shared/
├── AppFoundation/             # Core app utilities and services
└── TestSupport/               # Testing utilities and mocks
```

**AppFoundation contains:**
- Environment detection and configuration (`Environment.swift`, `AppConfig.swift`)
- Dependency injection (`Dependencies.swift`, `Dependencies+Environment.swift`)
- Navigation infrastructure (`Routes.swift`, `DeepLinkRouter.swift`, `NavigationEnvironment.swift`)
- Appearance preferences (`AppearancePreference.swift`)
- Service protocols (`ServiceProtocols.swift`)
- Auth services (`SupabaseAuthService.swift`, `SessionStore.swift`, `KeychainHelper.swift`)
- Phone verification (`TwilioPhoneVerifier.swift`)
- Mock implementations (`MockServices.swift`)
- Service factories (`ServiceFactory.swift`)

#### ThirdParty (`Packages/ThirdParty/`)
**When to use:** Integrating third-party SDKs that need custom Swift Package wrappers

```
ThirdParty/
├── hCaptcha/                  # hCaptcha challenge SDK
├── OneSignal/                 # Push notification service
├── PostHog/                   # Analytics SDK
└── Sentry/                    # Crash reporting SDK
```

**Use ThirdParty when:**
- SDK doesn't support SPM natively
- Need to wrap SDK in protocol interface
- Custom integration logic required

### Decision Tree: Where Does X Go?

#### "I'm creating a new view/screen"
→ **Feature module** in `Packages/Features/`
- If it's part of an existing feature, add to that feature's package
- If it's a new major feature, create a new Feature package

#### "I'm creating a reusable UI component"
→ **DesignSystem Kit** in `Packages/Kits/DesignSystem/`
- Buttons, cards, text styles, colors, etc.

#### "I'm creating a service/client"
→ **Kit module** in `Packages/Kits/`
- If it's auth-related → **AppFoundation** (`Shared/AppFoundation`)
- If it's a new capability → Create new Kit or add to existing Kit

#### "I'm creating app-wide utilities"
→ **AppFoundation** in `Packages/Shared/AppFoundation/`
- Extensions, helpers, configuration, DI infrastructure

#### "I'm creating test utilities"
→ **TestSupport** in `Packages/Shared/TestSupport/`
- Mock implementations, test fixtures, shared test helpers

#### "I'm creating navigation routes"
→ **AppFoundation** in `Packages/Shared/AppFoundation/Routes.swift`
- Tab-level routes (FeedRoute, SearchRoute, etc.)
- Deep link parsing logic

#### "I'm integrating a third-party SDK"
- If available via SPM → Add to Package.swift dependencies
- If needs custom wrapper → **ThirdParty** in `Packages/ThirdParty/`

### Package Structure Template

Every Swift Package must follow this structure:

```
PackageName/
├── Package.swift              # Package manifest (see ios-module-standards.mdc)
├── README.md                  # Package documentation
├── Sources/
│   └── PackageName/           # Source code (matches package name exactly)
│       ├── PackageName.swift  # Main public interface
│       └── [other files]      # Implementation files
└── Tests/
    └── PackageNameTests/      # Test files
        └── PackageNameTests.swift
```

**Critical naming rule:** The `Sources/PackageName/` directory name must **exactly match** the package name in `Package.swift`.

### File Naming Conventions

#### Swift Files
- **Views:** `{Feature}View.swift` (e.g., `ComposeView.swift`)
- **ViewModels:** `{Feature}ViewModel.swift` (e.g., `ComposeViewModel.swift`)
- **Models:** `{Feature}.swift` or `{Feature}Model.swift`
- **Services:** `{Service}Service.swift` (e.g., `AuthService.swift`)
- **Service Implementations:** `{Service}ServiceLive.swift` (e.g., `NetworkingClientLive.swift`)
- **Test Mocks:** `{Service}Mock.swift` or `{Service}Fake.swift`
- **Factories:** `{Service}Factory.swift`
- **Extensions:** `{Type}+{Purpose}.swift` (e.g., `String+Validation.swift`)

#### Resource Files
- **Assets:** Use `.xcassets` bundles in package `Resources/` directory
- **Strings:** `Localizable.strings`
- **Configuration:** `.plist` files

### Module Dependency Rules

#### Allowed Dependencies
- **Features** → Kits, Shared (AppFoundation, TestSupport)
- **Kits** → Other Kits, Shared (AppFoundation, TestSupport)
- **Shared** → Minimal external dependencies only
- **ThirdParty** → Self-contained, no internal dependencies

#### Dependency Hierarchy
```
Features (top level)
    ↓
Kits (middle level)
    ↓
Shared (foundation level)
    ↓
ThirdParty (isolated)
```

**Never create circular dependencies:** If Kit A needs Kit B, then Kit B cannot depend on Kit A.

### Why Auth is in AppFoundation (Not a Kit)

Authentication services live in `Shared/AppFoundation` rather than a separate `AuthKit` because:

1. **Foundation-Level Concern:** Auth is used by nearly every feature and kit
2. **Tight Integration:** Auth services integrate deeply with environment config and app lifecycle
3. **Avoid Circular Dependencies:** Many kits need auth services; having AuthKit would create dependency issues
4. **Protocol First:** Service protocols belong in Shared; implementations stay with protocols
5. **Simplicity:** One place for all auth code is clearer than splitting UI (Feature) and Services (Kit)

**Auth Architecture:**
- **Feature:** `Features/Auth/` - UI/UX and app-level state management
- **Services:** `Shared/AppFoundation/` - Service protocols, implementations, session management

### Why Navigation is in AppFoundation (Not a Kit)

Navigation infrastructure lives in `Shared/AppFoundation` because:

1. **Ubiquitous Dependency:** Every feature tab needs route definitions
2. **Deep Link Coordination:** Centralized deep link → route parsing
3. **Tab Coordination:** Selection state and cross-tab navigation logic
4. **Type Safety:** Shared route types ensure consistent navigation patterns
5. **Composition Root Proximity:** Navigation wiring happens at app root level

**Navigation Files (in AppFoundation):**
- `Routes.swift` - App-wide route enum definitions (one enum per tab flow)
- `DeepLinkRouter.swift` - URL parsing and route construction
- `NavigationEnvironment.swift` - SwiftUI environment for navigation coordination

### Resources Directory

Main app resources and entry point (not packages):

```
Resources/
├── AgoraApp.swift              # Main app entry point (@main)
├── ContentView.swift           # Root SwiftUI view
├── RootView.swift              # Root TabView container
├── LoadingView.swift           # App loading state view
├── Assets.xcassets/            # App-level assets (icons, colors)
├── Info.plist                  # App configuration
├── Agora.entitlements          # App entitlements (Sign in with Apple)
├── Localizable.strings         # App-level localized strings
└── Configs/                    # Environment plists (see ios-configuration.mdc)
```

### Quick Reference: Common Tasks

| Task | Location |
|------|----------|
| New user-facing feature | `Packages/Features/{FeatureName}/` |
| New reusable UI component | `Packages/Kits/DesignSystem/` |
| New API endpoint | `OpenAPI/agora.yaml` + `make api-gen` |
| New service/client | `Packages/Kits/{ServiceName}/` |
| Auth-related service | `Packages/Shared/AppFoundation/` |
| App-wide utility | `Packages/Shared/AppFoundation/` |
| Test helper | `Packages/Shared/TestSupport/` |
| Navigation route | `Packages/Shared/AppFoundation/Routes.swift` |
| Environment config | `Resources/Configs/{Environment}.plist` |
| Build script | `Scripts/{script-name}.sh` |
| Database migration | `database/migrations/{number}_{name}.sql` |

### Related Rules

For detailed information on specific topics:
- **Module standards:** `ios-module-standards.mdc` - How to create quality packages
- **Configuration:** `ios-configuration.mdc` - Build configs, environments, OpenAPI
- **Navigation:** `ios-navigation.mdc` - Navigation patterns and deep links
- **Dependency Injection:** `ios-di-injection.mdc` - DI patterns and scopes
- **Concurrency:** `swift-concurrency.mdc` - Async/await and actors
