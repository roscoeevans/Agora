// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
import HTTPTypes
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Begin Sign in with Apple flow
    ///
    /// - Remark: HTTP `POST /auth/swa/begin`.
    /// - Remark: Generated from `#/paths//auth/swa/begin/post`.
    func post_sol_auth_sol_swa_sol_begin(_ input: Operations.post_sol_auth_sol_swa_sol_begin.Input) async throws -> Operations.post_sol_auth_sol_swa_sol_begin.Output
    /// Complete Sign in with Apple flow
    ///
    /// - Remark: HTTP `POST /auth/swa/finish`.
    /// - Remark: Generated from `#/paths//auth/swa/finish/post`.
    func post_sol_auth_sol_swa_sol_finish(_ input: Operations.post_sol_auth_sol_swa_sol_finish.Input) async throws -> Operations.post_sol_auth_sol_swa_sol_finish.Output
    /// Create user profile after authentication
    ///
    /// - Remark: HTTP `POST /users/profile`.
    /// - Remark: Generated from `#/paths//users/profile/post`.
    func post_sol_users_sol_profile(_ input: Operations.post_sol_users_sol_profile.Input) async throws -> Operations.post_sol_users_sol_profile.Output
    /// Check if handle is available
    ///
    /// - Remark: HTTP `GET /users/check-handle`.
    /// - Remark: Generated from `#/paths//users/check-handle/get`.
    func get_sol_users_sol_check_hyphen_handle(_ input: Operations.get_sol_users_sol_check_hyphen_handle.Input) async throws -> Operations.get_sol_users_sol_check_hyphen_handle.Output
    /// Get current user profile
    ///
    /// - Remark: HTTP `GET /users/me`.
    /// - Remark: Generated from `#/paths//users/me/get`.
    func get_sol_users_sol_me(_ input: Operations.get_sol_users_sol_me.Input) async throws -> Operations.get_sol_users_sol_me.Output
    /// Update current user profile
    ///
    /// - Remark: HTTP `PATCH /users/me`.
    /// - Remark: Generated from `#/paths//users/me/patch`.
    func patch_sol_users_sol_me(_ input: Operations.patch_sol_users_sol_me.Input) async throws -> Operations.patch_sol_users_sol_me.Output
    /// Get For You feed
    ///
    /// - Remark: HTTP `GET /feed/for-you`.
    /// - Remark: Generated from `#/paths//feed/for-you/get`.
    func get_sol_feed_sol_for_hyphen_you(_ input: Operations.get_sol_feed_sol_for_hyphen_you.Input) async throws -> Operations.get_sol_feed_sol_for_hyphen_you.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Begin Sign in with Apple flow
    ///
    /// - Remark: HTTP `POST /auth/swa/begin`.
    /// - Remark: Generated from `#/paths//auth/swa/begin/post`.
    public func post_sol_auth_sol_swa_sol_begin(
        headers: Operations.post_sol_auth_sol_swa_sol_begin.Input.Headers = .init(),
        body: Operations.post_sol_auth_sol_swa_sol_begin.Input.Body
    ) async throws -> Operations.post_sol_auth_sol_swa_sol_begin.Output {
        try await post_sol_auth_sol_swa_sol_begin(Operations.post_sol_auth_sol_swa_sol_begin.Input(
            headers: headers,
            body: body
        ))
    }
    /// Complete Sign in with Apple flow
    ///
    /// - Remark: HTTP `POST /auth/swa/finish`.
    /// - Remark: Generated from `#/paths//auth/swa/finish/post`.
    public func post_sol_auth_sol_swa_sol_finish(
        headers: Operations.post_sol_auth_sol_swa_sol_finish.Input.Headers = .init(),
        body: Operations.post_sol_auth_sol_swa_sol_finish.Input.Body
    ) async throws -> Operations.post_sol_auth_sol_swa_sol_finish.Output {
        try await post_sol_auth_sol_swa_sol_finish(Operations.post_sol_auth_sol_swa_sol_finish.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create user profile after authentication
    ///
    /// - Remark: HTTP `POST /users/profile`.
    /// - Remark: Generated from `#/paths//users/profile/post`.
    public func post_sol_users_sol_profile(
        headers: Operations.post_sol_users_sol_profile.Input.Headers = .init(),
        body: Operations.post_sol_users_sol_profile.Input.Body
    ) async throws -> Operations.post_sol_users_sol_profile.Output {
        try await post_sol_users_sol_profile(Operations.post_sol_users_sol_profile.Input(
            headers: headers,
            body: body
        ))
    }
    /// Check if handle is available
    ///
    /// - Remark: HTTP `GET /users/check-handle`.
    /// - Remark: Generated from `#/paths//users/check-handle/get`.
    public func get_sol_users_sol_check_hyphen_handle(
        query: Operations.get_sol_users_sol_check_hyphen_handle.Input.Query,
        headers: Operations.get_sol_users_sol_check_hyphen_handle.Input.Headers = .init()
    ) async throws -> Operations.get_sol_users_sol_check_hyphen_handle.Output {
        try await get_sol_users_sol_check_hyphen_handle(Operations.get_sol_users_sol_check_hyphen_handle.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get current user profile
    ///
    /// - Remark: HTTP `GET /users/me`.
    /// - Remark: Generated from `#/paths//users/me/get`.
    public func get_sol_users_sol_me(headers: Operations.get_sol_users_sol_me.Input.Headers = .init()) async throws -> Operations.get_sol_users_sol_me.Output {
        try await get_sol_users_sol_me(Operations.get_sol_users_sol_me.Input(headers: headers))
    }
    /// Update current user profile
    ///
    /// - Remark: HTTP `PATCH /users/me`.
    /// - Remark: Generated from `#/paths//users/me/patch`.
    public func patch_sol_users_sol_me(
        headers: Operations.patch_sol_users_sol_me.Input.Headers = .init(),
        body: Operations.patch_sol_users_sol_me.Input.Body
    ) async throws -> Operations.patch_sol_users_sol_me.Output {
        try await patch_sol_users_sol_me(Operations.patch_sol_users_sol_me.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get For You feed
    ///
    /// - Remark: HTTP `GET /feed/for-you`.
    /// - Remark: Generated from `#/paths//feed/for-you/get`.
    public func get_sol_feed_sol_for_hyphen_you(
        query: Operations.get_sol_feed_sol_for_hyphen_you.Input.Query = .init(),
        headers: Operations.get_sol_feed_sol_for_hyphen_you.Input.Headers = .init()
    ) async throws -> Operations.get_sol_feed_sol_for_hyphen_you.Output {
        try await get_sol_feed_sol_for_hyphen_you(Operations.get_sol_feed_sol_for_hyphen_you.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// Production server
    public enum Server1 {
        /// Production server
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.agora.app/v1",
                variables: []
            )
        }
    }
    /// Production server
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.agora.app/v1",
            variables: []
        )
    }
    /// Staging server
    public enum Server2 {
        /// Staging server
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://staging-api.agora.app/v1",
                variables: []
            )
        }
    }
    /// Staging server
    @available(*, deprecated, renamed: "Servers.Server2.url")
    public static func server2() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://staging-api.agora.app/v1",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/SWABeginRequest`.
        public struct SWABeginRequest: Codable, Hashable, Sendable {
            /// Random nonce for security
            ///
            /// - Remark: Generated from `#/components/schemas/SWABeginRequest/nonce`.
            public var nonce: Swift.String
            /// Creates a new `SWABeginRequest`.
            ///
            /// - Parameters:
            ///   - nonce: Random nonce for security
            public init(nonce: Swift.String) {
                self.nonce = nonce
            }
            public enum CodingKeys: String, CodingKey {
                case nonce
            }
        }
        /// - Remark: Generated from `#/components/schemas/SWABeginResponse`.
        public struct SWABeginResponse: Codable, Hashable, Sendable {
            /// Apple authentication URL
            ///
            /// - Remark: Generated from `#/components/schemas/SWABeginResponse/authUrl`.
            public var authUrl: Swift.String
            /// Creates a new `SWABeginResponse`.
            ///
            /// - Parameters:
            ///   - authUrl: Apple authentication URL
            public init(authUrl: Swift.String) {
                self.authUrl = authUrl
            }
            public enum CodingKeys: String, CodingKey {
                case authUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/SWAFinishRequest`.
        public struct SWAFinishRequest: Codable, Hashable, Sendable {
            /// Apple identity token
            ///
            /// - Remark: Generated from `#/components/schemas/SWAFinishRequest/identityToken`.
            public var identityToken: Swift.String
            /// Apple authorization code
            ///
            /// - Remark: Generated from `#/components/schemas/SWAFinishRequest/authorizationCode`.
            public var authorizationCode: Swift.String
            /// Creates a new `SWAFinishRequest`.
            ///
            /// - Parameters:
            ///   - identityToken: Apple identity token
            ///   - authorizationCode: Apple authorization code
            public init(
                identityToken: Swift.String,
                authorizationCode: Swift.String
            ) {
                self.identityToken = identityToken
                self.authorizationCode = authorizationCode
            }
            public enum CodingKeys: String, CodingKey {
                case identityToken
                case authorizationCode
            }
        }
        /// - Remark: Generated from `#/components/schemas/AuthResponse`.
        public struct AuthResponse: Codable, Hashable, Sendable {
            /// JWT access token
            ///
            /// - Remark: Generated from `#/components/schemas/AuthResponse/accessToken`.
            public var accessToken: Swift.String
            /// JWT refresh token
            ///
            /// - Remark: Generated from `#/components/schemas/AuthResponse/refreshToken`.
            public var refreshToken: Swift.String
            /// - Remark: Generated from `#/components/schemas/AuthResponse/user`.
            public var user: Components.Schemas.User
            /// Creates a new `AuthResponse`.
            ///
            /// - Parameters:
            ///   - accessToken: JWT access token
            ///   - refreshToken: JWT refresh token
            ///   - user:
            public init(
                accessToken: Swift.String,
                refreshToken: Swift.String,
                user: Components.Schemas.User
            ) {
                self.accessToken = accessToken
                self.refreshToken = refreshToken
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case accessToken
                case refreshToken
                case user
            }
        }
        /// - Remark: Generated from `#/components/schemas/User`.
        public struct User: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/User/id`.
            public var id: Swift.String
            /// Canonical lowercase handle for uniqueness
            ///
            /// - Remark: Generated from `#/components/schemas/User/handle`.
            public var handle: Swift.String
            /// User's preferred capitalization of handle
            ///
            /// - Remark: Generated from `#/components/schemas/User/displayHandle`.
            public var displayHandle: Swift.String
            /// - Remark: Generated from `#/components/schemas/User/displayName`.
            public var displayName: Swift.String
            /// - Remark: Generated from `#/components/schemas/User/bio`.
            public var bio: Swift.String?
            /// - Remark: Generated from `#/components/schemas/User/avatarUrl`.
            public var avatarUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/User/createdAt`.
            public var createdAt: Foundation.Date
            /// Creates a new `User`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - handle: Canonical lowercase handle for uniqueness
            ///   - displayHandle: User's preferred capitalization of handle
            ///   - displayName:
            ///   - bio:
            ///   - avatarUrl:
            ///   - createdAt:
            public init(
                id: Swift.String,
                handle: Swift.String,
                displayHandle: Swift.String,
                displayName: Swift.String,
                bio: Swift.String? = nil,
                avatarUrl: Swift.String? = nil,
                createdAt: Foundation.Date
            ) {
                self.id = id
                self.handle = handle
                self.displayHandle = displayHandle
                self.displayName = displayName
                self.bio = bio
                self.avatarUrl = avatarUrl
                self.createdAt = createdAt
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case handle
                case displayHandle
                case displayName
                case bio
                case avatarUrl
                case createdAt
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateProfileRequest`.
        public struct CreateProfileRequest: Codable, Hashable, Sendable {
            /// Canonical lowercase handle (3-15 chars, alphanumeric + underscore)
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProfileRequest/handle`.
            public var handle: Swift.String
            /// User's preferred capitalization (e.g., "RockyEvans")
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProfileRequest/displayHandle`.
            public var displayHandle: Swift.String
            /// Display name shown in profile
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProfileRequest/displayName`.
            public var displayName: Swift.String
            /// Creates a new `CreateProfileRequest`.
            ///
            /// - Parameters:
            ///   - handle: Canonical lowercase handle (3-15 chars, alphanumeric + underscore)
            ///   - displayHandle: User's preferred capitalization (e.g., "RockyEvans")
            ///   - displayName: Display name shown in profile
            public init(
                handle: Swift.String,
                displayHandle: Swift.String,
                displayName: Swift.String
            ) {
                self.handle = handle
                self.displayHandle = displayHandle
                self.displayName = displayName
            }
            public enum CodingKeys: String, CodingKey {
                case handle
                case displayHandle
                case displayName
            }
        }
        /// - Remark: Generated from `#/components/schemas/UpdateProfileRequest`.
        public struct UpdateProfileRequest: Codable, Hashable, Sendable {
            /// User's preferred capitalization of handle
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateProfileRequest/displayHandle`.
            public var displayHandle: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateProfileRequest/displayName`.
            public var displayName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateProfileRequest/bio`.
            public var bio: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateProfileRequest/avatarUrl`.
            public var avatarUrl: Swift.String?
            /// Creates a new `UpdateProfileRequest`.
            ///
            /// - Parameters:
            ///   - displayHandle: User's preferred capitalization of handle
            ///   - displayName:
            ///   - bio:
            ///   - avatarUrl:
            public init(
                displayHandle: Swift.String? = nil,
                displayName: Swift.String? = nil,
                bio: Swift.String? = nil,
                avatarUrl: Swift.String? = nil
            ) {
                self.displayHandle = displayHandle
                self.displayName = displayName
                self.bio = bio
                self.avatarUrl = avatarUrl
            }
            public enum CodingKeys: String, CodingKey {
                case displayHandle
                case displayName
                case bio
                case avatarUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/CheckHandleResponse`.
        public struct CheckHandleResponse: Codable, Hashable, Sendable {
            /// Whether the handle is available
            ///
            /// - Remark: Generated from `#/components/schemas/CheckHandleResponse/available`.
            public var available: Swift.Bool
            /// Suggested alternative handles if unavailable
            ///
            /// - Remark: Generated from `#/components/schemas/CheckHandleResponse/suggestions`.
            public var suggestions: [Swift.String]?
            /// Creates a new `CheckHandleResponse`.
            ///
            /// - Parameters:
            ///   - available: Whether the handle is available
            ///   - suggestions: Suggested alternative handles if unavailable
            public init(
                available: Swift.Bool,
                suggestions: [Swift.String]? = nil
            ) {
                self.available = available
                self.suggestions = suggestions
            }
            public enum CodingKeys: String, CodingKey {
                case available
                case suggestions
            }
        }
        /// - Remark: Generated from `#/components/schemas/Post`.
        public struct Post: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Post/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Post/authorId`.
            public var authorId: Swift.String
            /// - Remark: Generated from `#/components/schemas/Post/text`.
            public var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/Post/linkUrl`.
            public var linkUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Post/mediaBundleId`.
            public var mediaBundleId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Post/replyToPostId`.
            public var replyToPostId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Post/quotePostId`.
            public var quotePostId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Post/likeCount`.
            public var likeCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Post/repostCount`.
            public var repostCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Post/replyCount`.
            public var replyCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Post/visibility`.
            @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _public = "public"
                case followers = "followers"
                case _private = "private"
            }
            /// - Remark: Generated from `#/components/schemas/Post/visibility`.
            public var visibility: Components.Schemas.Post.visibilityPayload?
            /// - Remark: Generated from `#/components/schemas/Post/createdAt`.
            public var createdAt: Foundation.Date
            /// Creates a new `Post`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - authorId:
            ///   - text:
            ///   - linkUrl:
            ///   - mediaBundleId:
            ///   - replyToPostId:
            ///   - quotePostId:
            ///   - likeCount:
            ///   - repostCount:
            ///   - replyCount:
            ///   - visibility:
            ///   - createdAt:
            public init(
                id: Swift.String,
                authorId: Swift.String,
                text: Swift.String,
                linkUrl: Swift.String? = nil,
                mediaBundleId: Swift.String? = nil,
                replyToPostId: Swift.String? = nil,
                quotePostId: Swift.String? = nil,
                likeCount: Swift.Int? = nil,
                repostCount: Swift.Int? = nil,
                replyCount: Swift.Int? = nil,
                visibility: Components.Schemas.Post.visibilityPayload? = nil,
                createdAt: Foundation.Date
            ) {
                self.id = id
                self.authorId = authorId
                self.text = text
                self.linkUrl = linkUrl
                self.mediaBundleId = mediaBundleId
                self.replyToPostId = replyToPostId
                self.quotePostId = quotePostId
                self.likeCount = likeCount
                self.repostCount = repostCount
                self.replyCount = replyCount
                self.visibility = visibility
                self.createdAt = createdAt
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case authorId
                case text
                case linkUrl
                case mediaBundleId
                case replyToPostId
                case quotePostId
                case likeCount
                case repostCount
                case replyCount
                case visibility
                case createdAt
            }
        }
        /// - Remark: Generated from `#/components/schemas/FeedResponse`.
        public struct FeedResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeedResponse/posts`.
            public var posts: [Components.Schemas.Post]
            /// - Remark: Generated from `#/components/schemas/FeedResponse/nextCursor`.
            public var nextCursor: Swift.String?
            /// Creates a new `FeedResponse`.
            ///
            /// - Parameters:
            ///   - posts:
            ///   - nextCursor:
            public init(
                posts: [Components.Schemas.Post],
                nextCursor: Swift.String? = nil
            ) {
                self.posts = posts
                self.nextCursor = nextCursor
            }
            public enum CodingKeys: String, CodingKey {
                case posts
                case nextCursor
            }
        }
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Hashable, Sendable {
            /// Error code
            ///
            /// - Remark: Generated from `#/components/schemas/Error/code`.
            public var code: Swift.String
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/Error/message`.
            public var message: Swift.String
            /// Additional error details
            ///
            /// - Remark: Generated from `#/components/schemas/Error/details`.
            public var details: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - code: Error code
            ///   - message: Error message
            ///   - details: Additional error details
            public init(
                code: Swift.String,
                message: Swift.String,
                details: OpenAPIRuntime.OpenAPIObjectContainer? = nil
            ) {
                self.code = code
                self.message = message
                self.details = details
            }
            public enum CodingKeys: String, CodingKey {
                case code
                case message
                case details
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct BadRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/BadRequest/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/BadRequest/content/application\/json`.
                case json(Components.Schemas._Error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas._Error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.BadRequest.Body
            /// Creates a new `BadRequest`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.BadRequest.Body) {
                self.body = body
            }
        }
        public struct Unauthorized: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/Unauthorized/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/Unauthorized/content/application\/json`.
                case json(Components.Schemas._Error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas._Error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.Unauthorized.Body
            /// Creates a new `Unauthorized`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.Unauthorized.Body) {
                self.body = body
            }
        }
        public struct InternalServerError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/InternalServerError/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/InternalServerError/content/application\/json`.
                case json(Components.Schemas._Error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas._Error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.InternalServerError.Body
            /// Creates a new `InternalServerError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.InternalServerError.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Begin Sign in with Apple flow
    ///
    /// - Remark: HTTP `POST /auth/swa/begin`.
    /// - Remark: Generated from `#/paths//auth/swa/begin/post`.
    public enum post_sol_auth_sol_swa_sol_begin {
        public static let id: Swift.String = "post/auth/swa/begin"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/swa/begin/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_auth_sol_swa_sol_begin.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_auth_sol_swa_sol_begin.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_auth_sol_swa_sol_begin.Input.Headers
            /// - Remark: Generated from `#/paths/auth/swa/begin/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/swa/begin/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SWABeginRequest)
            }
            public var body: Operations.post_sol_auth_sol_swa_sol_begin.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_auth_sol_swa_sol_begin.Input.Headers = .init(),
                body: Operations.post_sol_auth_sol_swa_sol_begin.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/swa/begin/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/swa/begin/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SWABeginResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SWABeginResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_auth_sol_swa_sol_begin.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_auth_sol_swa_sol_begin.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Apple authentication URL
            ///
            /// - Remark: Generated from `#/paths//auth/swa/begin/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_auth_sol_swa_sol_begin.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_auth_sol_swa_sol_begin.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//auth/swa/begin/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//auth/swa/begin/post/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Complete Sign in with Apple flow
    ///
    /// - Remark: HTTP `POST /auth/swa/finish`.
    /// - Remark: Generated from `#/paths//auth/swa/finish/post`.
    public enum post_sol_auth_sol_swa_sol_finish {
        public static let id: Swift.String = "post/auth/swa/finish"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/swa/finish/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_auth_sol_swa_sol_finish.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_auth_sol_swa_sol_finish.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_auth_sol_swa_sol_finish.Input.Headers
            /// - Remark: Generated from `#/paths/auth/swa/finish/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/swa/finish/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SWAFinishRequest)
            }
            public var body: Operations.post_sol_auth_sol_swa_sol_finish.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_auth_sol_swa_sol_finish.Input.Headers = .init(),
                body: Operations.post_sol_auth_sol_swa_sol_finish.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/swa/finish/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/swa/finish/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AuthResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AuthResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_auth_sol_swa_sol_finish.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_auth_sol_swa_sol_finish.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Authentication successful
            ///
            /// - Remark: Generated from `#/paths//auth/swa/finish/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_auth_sol_swa_sol_finish.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_auth_sol_swa_sol_finish.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//auth/swa/finish/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//auth/swa/finish/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//auth/swa/finish/post/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create user profile after authentication
    ///
    /// - Remark: HTTP `POST /users/profile`.
    /// - Remark: Generated from `#/paths//users/profile/post`.
    public enum post_sol_users_sol_profile {
        public static let id: Swift.String = "post/users/profile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/profile/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_users_sol_profile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_users_sol_profile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_users_sol_profile.Input.Headers
            /// - Remark: Generated from `#/paths/users/profile/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/profile/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateProfileRequest)
            }
            public var body: Operations.post_sol_users_sol_profile.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_users_sol_profile.Input.Headers = .init(),
                body: Operations.post_sol_users_sol_profile.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/profile/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/profile/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.User)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.User {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_users_sol_profile.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_users_sol_profile.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Profile created successfully
            ///
            /// - Remark: Generated from `#/paths//users/profile/post/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.post_sol_users_sol_profile.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.post_sol_users_sol_profile.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//users/profile/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//users/profile/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/profile/POST/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/profile/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_users_sol_profile.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_users_sol_profile.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Handle already taken
            ///
            /// - Remark: Generated from `#/paths//users/profile/post/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.post_sol_users_sol_profile.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.post_sol_users_sol_profile.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//users/profile/post/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check if handle is available
    ///
    /// - Remark: HTTP `GET /users/check-handle`.
    /// - Remark: Generated from `#/paths//users/check-handle/get`.
    public enum get_sol_users_sol_check_hyphen_handle {
        public static let id: Swift.String = "get/users/check-handle"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/check-handle/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Handle to check (lowercase)
                ///
                /// - Remark: Generated from `#/paths/users/check-handle/GET/query/handle`.
                public var handle: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - handle: Handle to check (lowercase)
                public init(handle: Swift.String) {
                    self.handle = handle
                }
            }
            public var query: Operations.get_sol_users_sol_check_hyphen_handle.Input.Query
            /// - Remark: Generated from `#/paths/users/check-handle/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_users_sol_check_hyphen_handle.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_users_sol_check_hyphen_handle.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.get_sol_users_sol_check_hyphen_handle.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.get_sol_users_sol_check_hyphen_handle.Input.Query,
                headers: Operations.get_sol_users_sol_check_hyphen_handle.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/check-handle/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/check-handle/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CheckHandleResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CheckHandleResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.get_sol_users_sol_check_hyphen_handle.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.get_sol_users_sol_check_hyphen_handle.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Handle availability status
            ///
            /// - Remark: Generated from `#/paths//users/check-handle/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_sol_users_sol_check_hyphen_handle.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.get_sol_users_sol_check_hyphen_handle.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//users/check-handle/get/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//users/check-handle/get/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get current user profile
    ///
    /// - Remark: HTTP `GET /users/me`.
    /// - Remark: Generated from `#/paths//users/me/get`.
    public enum get_sol_users_sol_me {
        public static let id: Swift.String = "get/users/me"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/me/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_users_sol_me.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_users_sol_me.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.get_sol_users_sol_me.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.get_sol_users_sol_me.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/me/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.User)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.User {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.get_sol_users_sol_me.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.get_sol_users_sol_me.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Current user profile
            ///
            /// - Remark: Generated from `#/paths//users/me/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_sol_users_sol_me.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.get_sol_users_sol_me.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//users/me/get/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/me/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.get_sol_users_sol_me.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.get_sol_users_sol_me.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Profile not found
            ///
            /// - Remark: Generated from `#/paths//users/me/get/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.get_sol_users_sol_me.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.get_sol_users_sol_me.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//users/me/get/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update current user profile
    ///
    /// - Remark: HTTP `PATCH /users/me`.
    /// - Remark: Generated from `#/paths//users/me/patch`.
    public enum patch_sol_users_sol_me {
        public static let id: Swift.String = "patch/users/me"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/me/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patch_sol_users_sol_me.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patch_sol_users_sol_me.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.patch_sol_users_sol_me.Input.Headers
            /// - Remark: Generated from `#/paths/users/me/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.UpdateProfileRequest)
            }
            public var body: Operations.patch_sol_users_sol_me.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.patch_sol_users_sol_me.Input.Headers = .init(),
                body: Operations.patch_sol_users_sol_me.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/me/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.User)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.User {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.patch_sol_users_sol_me.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.patch_sol_users_sol_me.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Profile updated successfully
            ///
            /// - Remark: Generated from `#/paths//users/me/patch/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.patch_sol_users_sol_me.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.patch_sol_users_sol_me.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//users/me/patch/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//users/me/patch/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//users/me/patch/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get For You feed
    ///
    /// - Remark: HTTP `GET /feed/for-you`.
    /// - Remark: Generated from `#/paths//feed/for-you/get`.
    public enum get_sol_feed_sol_for_hyphen_you {
        public static let id: Swift.String = "get/feed/for-you"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/feed/for-you/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Pagination cursor
                ///
                /// - Remark: Generated from `#/paths/feed/for-you/GET/query/cursor`.
                public var cursor: Swift.String?
                /// Number of posts to return
                ///
                /// - Remark: Generated from `#/paths/feed/for-you/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - cursor: Pagination cursor
                ///   - limit: Number of posts to return
                public init(
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.cursor = cursor
                    self.limit = limit
                }
            }
            public var query: Operations.get_sol_feed_sol_for_hyphen_you.Input.Query
            /// - Remark: Generated from `#/paths/feed/for-you/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_feed_sol_for_hyphen_you.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_feed_sol_for_hyphen_you.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.get_sol_feed_sol_for_hyphen_you.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.get_sol_feed_sol_for_hyphen_you.Input.Query = .init(),
                headers: Operations.get_sol_feed_sol_for_hyphen_you.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/feed/for-you/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/feed/for-you/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.FeedResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FeedResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.get_sol_feed_sol_for_hyphen_you.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.get_sol_feed_sol_for_hyphen_you.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Feed posts
            ///
            /// - Remark: Generated from `#/paths//feed/for-you/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_sol_feed_sol_for_hyphen_you.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.get_sol_feed_sol_for_hyphen_you.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//feed/for-you/get/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//feed/for-you/get/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
